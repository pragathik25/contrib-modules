<?php

/**
 * @file
 * Shopify module file.
 */

use Drupal\Core\Url;
use Drupal\shopify\Entity\ShopifyProduct;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Render\Element;
use Drupal\views\Entity\View;
use Shopify\PrivateApp;

/**
 * Implements hook_theme().
 */
function shopify_theme($existing, $type, $theme, $path) {
  return [
    'shopify_product' => [
      'render element' => 'elements',
    ],
    'shopify_product_variant' => [
      'render element' => 'elements',
    ],
    'shopify_cart' => [
      'template' => 'shopify_cart',
      'variables' => ['domain' => ''],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for shopify_product.
 */
function shopify_theme_suggestions_shopify_product_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'shopify_product__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_views_post_render().
 */
function shopify_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() === 'shopify_store') {
    $output['#attached']['library'][] = 'shopify/shopify.store.css';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds "edit on shopify" link to the term operations for collections.
 */
function shopify_form_taxonomy_overview_terms_alter(array &$form, FormStateInterface $form_state) {
  $vocab = $form_state->get(['taxonomy', 'vocabulary']);

  if ($vocab->id() == ShopifyProduct::SHOPIFY_COLLECTIONS_VID) {
    foreach (Element::children($form['terms']) as $key) {
      $term = $form['terms'][$key]['#term'];
      $form['terms'][$key]['operations']['#links']['edit_on_shopify'] = [
        'title' => t('Edit on Shopify'),
        'url' => Url::fromUri('https://' . shopify_shop_info('domain') . '/admin/collections/' . $term->field_shopify_collection_id->value),
        'attributes' => ['target' => '_blank'],
      ];
      ksort($form['terms'][$key]['operations']['#links']);
      $form['terms'][$key]['operations']['#links'] = array_reverse($form['terms'][$key]['operations']['#links']);
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * @todo: Doesn't work because link_templates['canonical'] override this.
 *
 * @see Drupal\Core\Entity\Entity::toUrl()
 */
function shopify_entity_bundle_info_alter(&$bundles) {
  if (isset($bundles['taxonomy_term']['shopify_tags'])) {
    $bundles['taxonomy_term']['shopify_tags']['uri_callback'] = 'shopify_taxonomy_tag_term_uri';
  }
  if (isset($bundles['taxonomy_term']['shopify_collections'])) {
    $bundles['taxonomy_term']['shopify_collections']['uri_callback'] = 'shopify_taxonomy_collection_term_uri';
  }
}

/**
 * Set the route for tag terms.
 */
function shopify_taxonomy_tag_term_uri(Term $term) {
  return Url::fromUri('internal:/' . shopify_store_url('page_tag', $term->id()));
}

/**
 * Set the route for collection terms.
 */
function shopify_taxonomy_collection_term_uri(Term $term) {
  return Url::fromUri('internal:/' . shopify_store_url('page_collection', $term->id()));
}

/**
 * Data that should be passed into drupalSettings.
 */
function shopify_drupal_js_data() {
  $info = shopify_shop_info();
  return [
    'shop' => [
      'domain' => $info->domain,
    ],
  ];
}

/**
 * Pulls the dynamic Shopify store URL from the View.
 */
function shopify_store_url($display = 'main', $arg = NULL) {
  $view = View::load('shopify_store');
  if ($view instanceof View) {
    $path = $view->getDisplay($display)['display_options']['path'];
    if ($arg) {
      return strtr($path, ['%' => $arg]);
    }
    return $path;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function shopify_entity_extra_field_info() {
  $extra = [];
  $extra['shopify_product']['shopify_product']['display']['add_to_cart_form'] = [
    'label' => t('Add to cart form'),
    'description' => t('Display variant options, quantity field, and "Add to Cart" button.'),
    'visible' => TRUE,
    'weight' => 100,
  ];
  $extra['shopify_product']['shopify_product']['display']['dynamic_product_image'] = [
    'label' => t('Dynamic product image'),
    'description' => t('Displays the product image by default, or the variant image if one is selected.'),
    'visible' => TRUE,
    'weight' => 150,
  ];
  $extra['shopify_product']['shopify_product']['display']['active_variant'] = [
    'label' => t('Active variant'),
    'description' => t('Renders the active variant.'),
    'visible' => TRUE,
    'weight' => 200,
  ];
  return $extra;
}

/**
 * Implements hook_cron().
 */
function shopify_cron() {
  $config = \Drupal::config('shopify.sync');
  $shopify_cron_sync_time = $config->get('cron_sync_time') ?: 0;
  $product_last = \Drupal::state()->get('shopify.sync.products_last_sync_time') ?: 0;
  $collection_last = \Drupal::state()->get('shopify.sync.collections_last_sync_time') ?: 0;

  // Sync the products and collections if the difference between now and the
  // last time they have been synched is greater than the cron sync time.
  $sync_products = $config->get('cron_sync_products') && \Drupal::time()->getRequestTime() - $product_last > $shopify_cron_sync_time;
  $sync_collections = $config->get('cron_sync_collections') && \Drupal::time()->getRequestTime() - $collection_last > $shopify_cron_sync_time;

  // Sync products.
  if ($sync_products) {
    $synced_products = shopify_sync_products([
      'query' => [
        'updated_at_min' => date(DATE_ISO8601, \Drupal::state()
          ->get('shopify.sync.products_last_sync_time')),
        'limit' => 250,
      ],
    ]);
    shopify_sync_deleted_products();
    \Drupal::state()
      ->set('shopify.sync.products_last_sync_time', \Drupal::time()->getRequestTime());
    \Drupal::logger('shopify.cron')
      ->info(t('Synced @count on cron run.', [
        '@count' => \Drupal::translation()
          ->formatPlural(count($synced_products), '@count product', '@count products'),
      ]));
  }

  // Sync collections.
  if ($sync_collections) {
    $synced_collections = shopify_sync_collections([
      'query' => [
        'updated_at_min' => date(DATE_ISO8601, \Drupal::state()
          ->get('shopify.sync.collections_last_sync_time')),
        'limit' => 250,
      ],
    ]);
    shopify_sync_deleted_collections();
    \Drupal::state()
      ->set('shopify.sync.collections_last_sync_time', \Drupal::time()->getRequestTime());
    \Drupal::logger('shopify.cron')
      ->info(t('Synced @count on cron run.', [
        '@count' => \Drupal::translation()
          ->formatPlural(count($synced_collections), '@count collection', '@count collections'),
      ]));
  }
}

/**
 * Implements hook_toolbar().
 */
function shopify_toolbar() {
  $items = [];
  $links = shopify_renderable_links();
  // @todo: Need caching per user setup.
  // @todo: Need better permission checking.
  $items['shopify'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Shopify'),
      '#url' => Url::fromRoute('shopify.admin'),
      '#attributes' => [
        'title' => t('Shopify'),
        'class' => ['toolbar-icon', 'toolbar-icon-shopify'],
      ],
    ],
    'tray' => [
      '#heading' => t('Shopify admin pages'),
      'shopify_links' => [
        '#theme' => 'item_list',
        '#items' => $links,
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
        '#attached' => [
          'library' => [
            'shopify/shopify.toolbar.css',
          ],
        ],
      ],
    ],
    '#weight' => -5,
  ];

  return $items;
}

/**
 * Returns an array of Shopify admin links.
 */
function shopify_renderable_links() {
  // @todo: Need better permission checking.
  $links[] = [
    '#type' => 'link',
    '#title' => t('Visit Store'),
    '#url' => Url::fromUri('internal:/' . shopify_store_url()),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('Overview'),
    '#url' => Url::fromRoute('shopify.admin'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('Sync'),
    '#url' => Url::fromRoute('shopify.sync'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('Webhooks'),
    '#url' => Url::fromRoute('shopify.webhooks'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('View Products'),
    '#url' => Url::fromRoute('entity.shopify_product.collection'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('View Collections'),
    '#url' => Url::fromUri('internal:/admin/structure/taxonomy/manage/shopify_collections/overview'),
    // @todo: Make more dynamic.
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('View Tags'),
    '#url' => Url::fromUri('internal:/admin/structure/taxonomy/manage/shopify_tags/overview'),
    // @todo: Make more dynamic.
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('Product Display'),
    '#url' => Url::fromUri('internal:/admin/structure/shopify_product/display'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('Variant Display'),
    '#url' => Url::fromUri('internal:/admin/structure/shopify_product_variant/display'),
  ];
  $links[] = [
    '#type' => 'link',
    '#title' => t('API Settings'),
    '#url' => Url::fromRoute('shopify.api.admin'),
  ];
  $shop_domain = shopify_shop_info('domain');
  if (!empty($shop_domain)) {
    $links[] = [
      '#type' => 'link',
      '#title' => t('Shopify Admin &rarr;'),
      '#url' => Url::fromUri('https://' . shopify_shop_info('domain') . '/admin', ['attributes' => ['target' => '_blank']]),
    ];
  }
  return $links;
}

/**
 * Gets store info from Shopify.
 *
 * @param string $key
 *   Optional specific key to return.
 * @param bool $refresh
 *   Whether store info should be refreshed from Shopify.
 *
 * @return string|object
 *   Returns a specific key value or the info object.
 */
function shopify_shop_info($key = '', $refresh = FALSE) {
  if ($refresh) {
    $client = shopify_get_api_client();
    if (!empty($client)) {
      $info = $client->getShopInfo();
      \Drupal::state()->set('shopify.shop_info', $info);
    }
  }
  $info = \Drupal::state()->get('shopify.shop_info', new stdClass());
  if (!empty($key)) {
    return isset($info->{$key}) ? $info->{$key} : '';
  }
  else {
    return $info;
  }
}

/**
 * Formats currency based on Shopify settings.
 *
 * @param float $amount
 *   Amount that should be formatted.
 *
 * @return string
 *   Amount with currency.
 */
function shopify_currency_format($amount) {
  return strtr(shopify_shop_info()->money_format, ['{{amount}}' => $amount]);
}

/**
 * Sync Shopify products to the site.
 *
 * @param array $opts
 *   Array of options to pass the API call.
 *
 * @return \Drupal\shopify\Entity\ShopifyProduct[]
 *   Returns the products that were updated/created.
 */
function shopify_sync_products(array $opts = []) {
  $client = shopify_get_api_client();
  $result = $client->get('products', $opts);
  $synced_products = [];

  foreach ($result->products as $product) {
    try {
      // Fetch alt data for product image.
      if (!empty($product->image)) {
        $product->image->alt = shopify_fetch_alt($client, $product->image->id);
      }
      // Fetch alt data for product images.
      if (!empty($product->images)) {
        foreach ($product->images as $img_key => $image) {
          $product->images[$img_key]->alt = shopify_fetch_alt($client, $image->id);
        }
      }
      // Fetch the metafields of the variants.
      if (!empty($product->variants)) {
        foreach ($product->variants as $variant_key => $variant) {
          $product->variants[$variant_key]->member = shopify_fetch_variant_metafields($client, $variant->id, 'member');
          $product->variants[$variant_key]->non_member = shopify_fetch_variant_metafields($client, $variant->id, 'nonmember');
        }
      }

      $member_price = shopify_fetch_product_metafields($client, $product->id, 'member');
      $non_member_price = shopify_fetch_product_metafields($client, $product->id, 'nonmember');

      $entity = ShopifyProduct::loadByProductId($product->id);
      $values = (array) $product;
      if (isset($values['admin_graphql_api_id'])) {
        unset($values['admin_graphql_api_id']);
      }
      if ($entity instanceof ShopifyProduct) {
        if ($member_price) {
          $values['member_price'] = $member_price;
        }
        if ($non_member_price) {
          $values['non_member_price'] = $non_member_price;
        }
        $entity->update($values);
        $entity->save();
      }
      else {
        $entity = ShopifyProduct::create($values);
        if ($values['tags']) {
          $vol_tid = [];
          $topic_tid = [];
          $lang_tid = [];
          $pub_tid = [];
          $tags = explode(',', $values['tags']);
          foreach ($tags as $tag) {
            $tag = trim($tag);
            if (preg_match("/StdVol/i", $tag) == 1 && stripos($tag, 'StdVol') == 0) {
              $term_name = str_replace('StdVol-', '', $tag);
              $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_volumes']);
              if ($term) {
                foreach ($term as $tid) {
                  array_push($vol_tid, $tid->id());
                }
              } else {
                $new_tag = Term::create([
                  'vid' => 'shopify_volumes',
                  'name' => $term_name,
                ])->save();
                $term = \Drupal::entityTypeManager()
                  ->getStorage('taxonomy_term')
                  ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_volumes']);
                foreach ($term as $tid) {
                  array_push($vol_tid, $tid->id());
                }
              }
            }
            if (preg_match("/StdTpc/i", $tag) == 1 && stripos($tag, 'StdTpc') == 0) {
              $term_name = str_replace('StdTpc-', '', $tag);
              $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_topics']);
              if ($term) {
                foreach ($term as $tid) {
                  array_push($topic_tid, $tid->id());
                }
              } else {
                $new_tag = Term::create([
                  'vid' => 'shopify_topics',
                  'name' => $term_name,
                ])->save();
                $term = \Drupal::entityTypeManager()
                  ->getStorage('taxonomy_term')
                  ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_topics']);
                foreach ($term as $tid) {
                  array_push($topic_tid, $tid->id());
                }
              }
            }
            if (preg_match("/ElnTpc/i", $tag) == 1 && stripos($tag, 'ElnTpc') == 0) {
              $term_name = str_replace('ElnTpc-', '', $tag);
              $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_topics']);
              if ($term) {
                foreach ($term as $tid) {
                  array_push($topic_tid, $tid->id());
                }
              } else {
                $new_tag = Term::create([
                  'vid' => 'shopify_topics',
                  'name' => $term_name,
                ])->save();
                $term = \Drupal::entityTypeManager()
                  ->getStorage('taxonomy_term')
                  ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_topics']);
                foreach ($term as $tid) {
                  array_push($topic_tid, $tid->id());
                }
              }
            }
            if (preg_match("/Lang/i", $tag) == 1 && stripos($tag, 'Lang') == 0) {
              $term_name = str_replace('Lang-', '', $tag);
              $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_languages']);
              if ($term) {
                foreach ($term as $tid) {
                  array_push($lang_tid, $tid->id());
                }
              } else {
                $new_tag = Term::create([
                  'vid' => 'shopify_languages',
                  'name' => $term_name,
                ])->save();
                $term = \Drupal::entityTypeManager()
                  ->getStorage('taxonomy_term')
                  ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_languages']);
                foreach ($term as $tid) {
                  array_push($lang_tid, $tid->id());
                }
              }
            }
            if (preg_match("/StdPbc/i", $tag) == 1 && stripos($tag, 'StdPbc') == 0) {
              $term_name = str_replace('StdPbc-', '', $tag);
              $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_publishing_cycle']);
              if ($term) {
                foreach ($term as $tid) {
                  array_push($pub_tid, $tid->id());
                }
              } else {
                $new_tag = Term::create([
                  'vid' => 'shopify_publishing_cycle',
                  'name' => $term_name,
                ])->save();
                $term = \Drupal::entityTypeManager()
                  ->getStorage('taxonomy_term')
                  ->loadByProperties(['name' => $term_name, 'vid' => 'shopify_publishing_cycle']);
                foreach ($term as $tid) {
                  array_push($pub_tid, $tid->id());
                }
              }
            }
          }
          if ($vol_tid) {
            $entity->set('field_volumes', $vol_tid);
          }
          if ($topic_tid) {
            $entity->set('field_topics', $topic_tid);
          }
          if ($lang_tid) {
            $entity->set('field_languages', $lang_tid);
          }
          if ($pub_tid) {
            $entity->set('field_publishing_cycle', $pub_tid);
          }
        }
        if ($member_price) {
          $entity->set('field_member_price', $member_price);
        }
        if ($non_member_price) {
          $entity->set('field_non_member_price', $non_member_price);
        }
        $entity->save();
      }
      $synced_products[] = $entity;
    }
    catch (Exception $e) {
      \Drupal::logger('shopify')->error('Failed to sync product id: %id', ['%id' => $product->id]);
    }
  }
  return $synced_products;
}

/**
 * Fetch image alt data.
 *
 * @param object $client
 *   Client object used with the initial API call.
 * @param int $image_id
 *   The id of the image to fetch the alt for.
 *
 * @return string
 *   Alt text, or empty string.
 */
function shopify_fetch_alt($client, $image_id) {
  $image_meta = $client->get('metafields', [
    'query' => [
      'metafield[owner_id]' => $image_id,
      'metafield[owner_resource]' => 'product_image',
    ],
  ]);
  foreach ($image_meta->metafields as $metafield) {
    if ($metafield->key === 'alt') {
      return $metafield->value;
    }
  }
  return '';
}

/**
 * Deletes products on the site that don't exist on Shopify anymore.
 *
 * @param array $opts
 *   Array of options to pass to the API call.
 *
 * @return int
 *   The number of deleted products.
 */
function shopify_sync_deleted_products(array $opts = []) {
  $client = shopify_get_api_client();
  $opts += ['query' => ['fields' => 'id,variants']];

  // Get all Shopify product_ids and variant_ids.
  $products = $client->getProducts($opts);
  $product_count = $client->getProductsCount();
  $product_ids = $variant_ids = [];

  // Build up arrays of products and variant IDs.
  foreach ($products as $product) {
    $product_ids[] = $product->id;
    foreach ($product->variants as $variant) {
      $variant_ids[] = $variant->id;
    }
  }

  // Sanity check to make sure we've gotten all data back from Shopify.
  if ($product_count != count($product_ids)) {
    // Something went wrong.
    return 0;
  }

  // Go ahead and delete all rogue products.
  $query = \Drupal::entityQuery('shopify_product');
  $query->condition('product_id', $product_ids, 'NOT IN');
  $result = $query->execute();
  if ($result) {
    $manager = \Drupal::entityTypeManager()
      ->getStorage('shopify_product');
    $product_entities = $manager->loadMultiple($result);
    $manager->delete($product_entities);
  }

  // Go ahead and delete all rogue variants.
  $query = \Drupal::entityQuery('shopify_product_variant');
  $query->condition('variant_id', $variant_ids, 'NOT IN');
  $result = $query->execute();
  if ($result) {
    $manager = \Drupal::entityTypeManager()
      ->getStorage('shopify_product_variant');
    $variant_entities = $manager->loadMultiple($result);
    $manager->delete($variant_entities);
  }

  return isset($product_entities) ? count($product_entities) : 0;
}

/**
 * Sync Shopify collections to the site.
 *
 * @param array $opts
 *   Array of options to pass the API call.
 *
 * @return \Drupal\taxonomy\Entity\Term[]
 *   Returns the collections that were updated/created.
 */
function shopify_sync_collections(array $opts = []) {
  $collections = shopify_api_get_collections($opts);
  $synced_collections = [];
  foreach ($collections as $collection) {
    $term = shopify_collection_load($collection->id);
    if ($term instanceof Term) {
      $term = shopify_collection_update($collection, TRUE);
    }
    else {
      // Need to create a new collection.
      $term = shopify_collection_create($collection, TRUE);
    }
    $synced_collections[] = $term;
  }
  return $synced_collections;
}

/**
 * Deletes collections on the site that don't exist on Shopify anymore.
 *
 * @param array $opts
 *   Additional options to pass to the API call.
 *
 * @return int
 *   Returns the count of collections deleted.
 */
function shopify_sync_deleted_collections(array $opts = []) {
  $opts += ['query' => ['fields' => 'id']];
  $collections = shopify_api_get_collections();
  $collection_ids = [];

  // Build up array of all existing collection_ids.
  foreach ($collections as $col) {
    $collection_ids[] = $col->id;
  }

  // Get collections that are not on Shopify anymore.
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', 'shopify_collections');
  $query->condition('field_shopify_collection_id', $collection_ids, 'NOT IN');
  $result = $query->execute();

  // Delete these collections.
  if ($result) {
    $manager = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term');
    $collection_entities = $manager->loadMultiple($result);
    $manager->delete($collection_entities);
  }

  return isset($collection_entities) ? count($collection_entities) : 0;
}

/**
 * Deletes all Shopify products.
 */
function shopify_product_delete_all() {
  $ids = shopify_product_load_all_ids();
  foreach ($ids as $id) {
    $product = ShopifyProduct::load($id);
    $product->delete();
  }
}

/**
 * Loads all Shopify product IDs.
 *
 * @return array
 *   Shopify product IDs.
 */
function shopify_product_load_all_ids() {
  $query = \Drupal::entityQuery('shopify_product');
  $ids = $query->execute();
  if ($ids) {
    return $ids;
  }
  return [];
}

/**
 * Create a Shopify API client class.
 *
 * @return Shopify\Client
 *   A ShopifyClient class if all connection settings are present, otherwise
 *   NULL.
 */
function shopify_get_api_client() {
  if (!_shopify_api_client_has_valid_config()) {
    return NULL;
  }
  $config = \Drupal::config('shopify.settings');
  return new PrivateApp($config->get('api.domain'), $config->get('api.key'), $config->get('api.password'), $config->get('api.secret'));
}

/**
 * Determines if the Shopify client has all available config options.
 *
 * @return bool
 *   Returns FALSE if required Shopify variables are not set.
 */
function _shopify_api_client_has_valid_config() {
  $config = \Drupal::config('shopify.settings');
  return $config->get('api.key') && $config->get('api.domain') && $config->get('api.password') && $config->get('api.secret');
}

/**
 * Get Shopify collections from the API.
 *
 * @param array $opts
 *   Arguments to pass to the API.
 * @param string $type
 *   Type of collections to get, options are:
 *   - both: Get smart and custom collections.
 *   - smart: Get smart collections only.
 *   - custom: Get custom collections only.
 *
 * @return array
 *   Returns the API response data.
 */
function shopify_api_get_collections(array $opts = [], $type = 'both') {
  $smart_collections = $custom_collections = [];
  $client = shopify_get_api_client();
  if ($type == 'both' || $type == 'smart') {
    $smart_collections = $client->getResources('smart_collections', $opts);
  }
  if ($type == 'both' || $type == 'custom') {
    $custom_collections = $client->getResources('custom_collections', $opts);
  }
  return array_merge($smart_collections, $custom_collections);
}

/**
 * Loads a collection term based on the collection ID.
 *
 * @param int $collection_id
 *   Shopify collection ID.
 *
 * @return \Drupal\taxonomy\Entity\Term
 *   Shopify collection.
 */
function shopify_collection_load($collection_id) {
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('field_shopify_collection_id', $collection_id);
  $ids = $query->execute();
  if ($ids) {
    $terms = Term::loadMultiple($ids);
    return reset($terms);
  }
  return FALSE;
}

/**
 * Create a new collection in the system and sync products.
 *
 * @param object $collection
 *   Shopify collection.
 * @param bool $sync_products
 *   Whether or not to sync product information during creation.
 *
 * @return \Drupal\taxonomy\Entity\Term
 *   Shopify collection.
 */
function shopify_collection_create(\stdClass $collection, $sync_products = FALSE) {
  $date = strtotime($collection->published_at);
  $term = Term::create([
    'vid' => ShopifyProduct::SHOPIFY_COLLECTIONS_VID,
    'name' => $collection->title,
    'description' => [
      'value' => $collection->body_html,
      'format' => filter_default_format(),
    ],
    'field_shopify_collection_id' => $collection->id,
    'field_shopify_collection_pub' => $date ? $date : 0,
  ]);
  if ($term->save() && isset($collection->image->src)) {
    // Save the image for this term.
    shopify_collection_save_image($term, $collection->image->src);
  }
  if ($sync_products) {
    // Sync product information for this collection.
    shopify_collection_sync_products($collection);
    update_shopify_collection_field($collection);
  }
  return $term;
}

/**
 * Saves an image for a Shopify collection.
 *
 * @param \Drupal\taxonomy\Entity\Term $term
 *   Taxonomy term entity.
 * @param string $image_url
 *   Remote image URL for the collection image.
 */
function shopify_collection_save_image(Term $term, $image_url) {
  $directory = file_build_uri('shopify_images');
  if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
    // If our directory doesn't exist and can't be created, use the default.
    $directory = NULL;
  }
  $file = system_retrieve_file($image_url, $directory, TRUE, FileSystemInterface::EXISTS_REPLACE);
  $term->field_shopify_collection_image = $file;
  $term->save();
}

/**
 * Sync product collect information for a given collection.
 *
 * @param object $collection
 *   Shopify collection.
 */
function shopify_collection_sync_products(\stdClass $collection) {
  $term = shopify_collection_load($collection->id);
  $client = shopify_get_api_client();
  $collects = $client->getResources("collections/{$collection->id}/products", ['query' => ['fields' => 'id']]);
  foreach ($collects as $c) {
    // Update this product information.
    $product = ShopifyProduct::loadByProductId($c->id);
    if (!$product) {
      continue;
    }
    foreach ($product->collections as $key => $item) {
      if ($item->target_id && ($item->target_id == $term->id())) {
        // Product already in collection.
        // Check if this collection is active.
        if ($term->field_shopify_collection_pub->value == 0) {
          // Remove this collection from the product.
          $product->collections->removeItem($key);
          $product->save();
        }
        continue 2;
      }
    }
    if ($term->field_shopify_collection_pub->value != 0) {
      $product->collections[] = $term;
      $product->save();
    }
  }
}

/**
 * Update a Shopify collection with new information.
 *
 * @param object $collection
 *   Shopify collection.
 * @param bool $sync_products
 *   Whether or not to sync product information during update.
 *
 * @return \Drupal\taxonomy\Entity\Term
 *   Shopify collection.
 */
function shopify_collection_update(\stdClass $collection, $sync_products = FALSE) {
  $term = shopify_collection_load($collection->id);
  if ($term) {
    $term->name = $collection->title;
    $term->description = [
      'value' => $collection->body_html,
      'format' => filter_default_format(),
    ];
    $date = strtotime($collection->published_at);
    $term->field_shopify_collection_pub = $date ? $date : 0;
  }
  if ($term->save() && isset($collection->image->src)) {
    // Save the image for this term.
    shopify_collection_save_image($term, $collection->image->src);
  }
  if ($sync_products) {
    // Sync product information for this collection.
    shopify_collection_sync_products($collection);
    update_shopify_collection_field($collection);
  }
  return $term;
}

/**
 * Delete all Shopify collections.
 */
function shopify_delete_all_collections() {
  $ids = shopify_collection_load_all_ids();
  foreach ($ids as $id) {
    $term = Term::load($id);
    $term->delete();
  }
}

/**
 * Loads all Shopify collection IDs.
 *
 * @return array
 *   Shopify collections IDs.
 */
function shopify_collection_load_all_ids() {
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', ShopifyProduct::SHOPIFY_COLLECTIONS_VID);
  $ids = $query->execute();
  if ($ids) {
    return $ids;
  }
  return [];
}

/**
 * Prepares variables for shopify product templates.
 *
 * Default template: shopify-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - shopify_product: The shopify product object.
 *   - view_mode: View mode; e.g., 'full', 'store_listing', etc.
 */
function template_preprocess_shopify_product(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['shopify_product'] = $variables['elements']['#shopify_product'];

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for shopify product variant templates.
 *
 * Default template: shopify-product-variant.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - shopify_product_variant: The shopify product variant object.
 *   - view_mode: View mode; e.g., 'full', 'store_listing', etc.
 */
function template_preprocess_shopify_product_variant(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['shopify_product_variant'] = $variables['elements']['#shopify_product_variant'];

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Fetch variant metadata.
 *
 * @param object $client
 *   Client object used with the initial API call.
 * @param int $variant_id
 *   The id of the image to fetch the alt for.
 * @param string $field
 *   The field to fetch the data.
 *
 * @return mixed
 *   member and nonmember prices, or empty string.
 */
function shopify_fetch_variant_metafields($client, $variant_id, $field) {
  $variant_meta = $client->get('metafields', [
    'query' => [
      'metafield[owner_id]' => $variant_id,
      'metafield[owner_resource]' => 'variants',
    ],
  ]);
  if ($variant_meta) {
    foreach ($variant_meta->metafields as $metafield) {
      $value = json_decode($metafield->value);
      return number_format((float)$value->prices->$field->q1/100, 2);
    }
  }
  return '';
}

/**
 * Sync product collection field for a given collection.
 *
 * @param object $collection
 *   Shopify collection.
 */
function update_shopify_collection_field(\stdClass $collection) {
  $new_product_id = [];
  $term = shopify_collection_load($collection->id);
  $client = shopify_get_api_client();
  $collection_term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $collection->title, 'vid' => 'shopify_collection']);
  if (!$collection_term) {
    $new_tag = Term::create([
      'vid' => 'shopify_collection',
      'name' => $collection->title,
    ])->save();
  }
  $collection_term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $collection->title, 'vid' => 'shopify_collection']);
  foreach ($collection_term as $tid) {
    $collection_term_id = $tid->id();
  }
  $collects = $client->getResources("collections/{$collection->id}/products", ['query' => ['fields' => 'id']]);
  foreach ($collects as $c) {
    $product = ShopifyProduct::loadByProductId($c->id);
    if (!$product) {
      continue;
    }
    array_push($new_product_id, $product->id());
  }
  $old_product_id = [];
  $old_products = \Drupal::entityTypeManager()->getStorage('shopify_product')->loadByProperties([
    'field_collections' => $collection_term_id,
  ]);
  foreach ($old_products as $key => $value) {
    array_push($old_product_id, $key);
  }
  $add_collections = array_diff($new_product_id, $old_product_id);
  $remove_collections = array_diff($old_product_id, $new_product_id);

  if ($add_collections) {
    foreach ($add_collections as $id) {
      $shopify_product = \Drupal::entityTypeManager()->getStorage('shopify_product')->load($id);
      $values = $shopify_product->get('field_collections')->getValue();
      $values[$collection_term_id] = ['target_id' => $collection_term_id];
      $shopify_product->set('field_collections', $values);
      $shopify_product->save();
    }
  }
  if ($remove_collections) {
    foreach ($remove_collections as $id) {
      $shopify_product = \Drupal::entityTypeManager()->getStorage('shopify_product')->load($id);
      unset($shopify_product->field_collections[$collection_term_id]);
      $shopify_product->save();
    }
  }
}

/**
 * Fetch product metadata.
 *
 * @param object $client
 *   Client object used with the initial API call.
 * @param int $product_id
 *   The id of the product.
 * @param string $field
 *   The field to fetch the data.
 *
 * @return mixed
 *   member and nonmember prices, or empty string.
 */
function shopify_fetch_product_metafields($client, $product_id, $field) {
  $product_meta = $client->get('metafields', [
    'query' => [
      'metafield[owner_id]' => $product_id,
      'metafield[owner_resource]' => 'product',
    ],
  ]);
  if ($product_meta) {
    foreach ($product_meta->metafields as $metafield) {
      $value = json_decode($metafield->value);
      return number_format((float)$value->prices->$field->q1/100, 2);
    }
  }
  return '';
}
